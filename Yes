local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local tycoonsFolder = workspace:WaitForChild("Tycoons"):WaitForChild("Tycoons")

-- A table to track all givers already attached
local attachedGivers = {}

-- Function to process a giver
local function attachGiver(giver)
	if attachedGivers[giver] then return end -- Already processed
	attachedGivers[giver] = true

	-- If it's a model, prepare and weld it
	if giver:IsA("Model") then
		local primary = giver.PrimaryPart or giver:FindFirstChildWhichIsA("BasePart")
		if primary then
			giver.PrimaryPart = primary
			for _, part in ipairs(giver:GetDescendants()) do
				if part:IsA("BasePart") then
					part.CanCollide = true
					part.Transparency = 0.5
					part.Anchored = false

					local weld = Instance.new("WeldConstraint")
					weld.Part0 = hrp
					weld.Part1 = part
					weld.Parent = part
				end
			end
			giver:SetPrimaryPartCFrame(hrp.CFrame)
			giver.Parent = workspace -- just in case it's elsewhere
		end

	elseif giver:IsA("BasePart") then
		-- Single part
		giver.CanCollide = true
		giver.Transparency = 0.5
		giver.Anchored = false

		local weld = Instance.new("WeldConstraint")
		weld.Part0 = hrp
		weld.Part1 = giver
		weld.Parent = giver
		giver.CFrame = hrp.CFrame
		giver.Parent = workspace

	elseif giver:IsA("Tool") then
		-- Give tools to the backpack
		giver.Parent = player.Backpack
	end
end

-- Loop to continuously check for new givers
while true do
	for _, tycoon in ipairs(tycoonsFolder:GetChildren()) do
		local purchased = tycoon:FindFirstChild("PurchasedObjects")
		if purchased then
			for _, folder in ipairs(purchased:GetChildren()) do
				local giver = folder:FindFirstChild("Giver")
				if giver then
					attachGiver(giver)
				end
			end
		end
	end
	task.wait(3) -- Adjust how frequently it checks for new givers
end
